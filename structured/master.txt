
1. Top level

%% grammar %%

    program ::= {var_def | func_def}* stmt*

%% pass 1 %%

    program = {"var_defs"? : List[var_def], "func_defs"? : List[func_def], "stmts"? : List[stmt]}

%% pass 2 %%

    program = {"types"? : Dict[ID -> type], "inits"? : Dict[ID -> literal], "funcs"? : Dict[ID -> func_def], "stmts"? : List[stmt]}

2. Definitions

%% grammar %%

    var_def ::= typed_var = literal NEWLINE
    func_def ::= "def" ID ({typed_var {, typed_var}*}?) {-> type}? : NEWLINE INDENT var_def* stmt+ DEDENT

%% pass 1 %%

    var_def = {"typed_var" : typed_var, "literal"? : BOOL | NUM}
    func_def = {"name" : ID, "params"? : List[typed_var], "type"? : type, "var_defs"? : List[var_def], "stmts": List[stmt]}

%% pass 2 %%

    func_def = ??

3. Statements

%% grammar %%

    stmt ::= {pass_stmt | print_stmt | return_stmt | assign_stmt | expr_stmt} NEWLINE
    pass_stmt ::= "pass"
    print_stmt ::= "print" (expr)
    return_stmt ::= "return" {expr}?
    assign_stmt ::= ID = expr
    expr_stmt ::= expr

%% pass 1 %%

    pass_stmt = {"stmt" : "pass"}
    print_stmt = {"stmt" : "print", "expr" : expr}
    return_stmt = {"stmt" : "return", "expr"? : expr}
    assign_stmt = {"stmt" : "assign", "dest" : ID, "expr" : expr}
    expr_stmt = {"stmt" : "expr", "expr" : expr}

4. Expressions

    expr ::= call_expr | literal | ID
    call_expr ::=  ID ({expr {, expr}*}?)

%% pass 1 %%

    call_expr = {"call" : ID, "args"? : List[expr]}

5. Terminals

    typed_var ::= ID : type
    type ::= "int" | "bool"
    literal ::= "None" | BOOL | NUM

