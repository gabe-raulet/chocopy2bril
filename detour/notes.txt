typed_var ::= {"name" : ID, "type" : TYPE}
var_def ::= {"name" : ID, "type" : TYPE, "init" : LIT}

stmt ::= print_stmt | return_stmt | assign_stmt | expr
print_stmt ::= {"stmt" : "print", "expr" : expr}
return_stmt ::= {"stmt" : "return", "expr" : expr}
assign_stmt ::= {"stmt" : "assign", "dest" : ID, "expr" : expr}

expr ::= func_call |

var_inits ::= {v_1 : LIT, ..., v_n : LIT}
var_types ::= {x_1 : TYPE, ..., x_m : TYPE, v_1 : TYPE, ..., v_n : TYPE}
func_def ::= {"name" : ID, "var_inits" : var_inits, "var_types" : var_types, "rtype" : TYPE, "stmts" : stmts, "args" : [x_1, ..., x_m]}

##############################################

Program

    {"functions": [<Function>, ...]}

Function

    {
        "name": "<string>",
        "args": ["<string>", ...]?,
        "var_types": [{"name": "<string>", "type": <Type>}, ...]?,
        "var_inits": [{"name": "<string>", "value": <Literal>}, ...]?,
        "type": <Type>?,
        "stmts": [<Stmt>, ...]
    }

VarDef

    {
        "name": "<string>",
        "type": <Type>,
        "init": <Literal>
    }

Stmt

    PassStmt

        {
            "stmt" : "pass"
        }

    PrintStmt

        {
            "stmt": "print",
            "expr": <Expr>
        }

    ReturnStmt

        {
            "stmt": "return",
            "expr": <Expr>
        }

    AssignStmt

        {
            "stmt": "assign",
            "dest": <Id>,
            "expr": <Expr>
        }

    <Expr>

Expr

    <Call>

    IdExpr

        {
            "name": <Id>
        }

    <Literal>

Literal

    {
        "literal":
    }
