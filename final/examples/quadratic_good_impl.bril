@sqrt(s: int): int {
    one: int = const 1;
    two: int = const 2;
    cond: bool = le s one;
    br cond .L1 .L2;
.L1:
    ret s;
.L2:
    x0: int = div s two;
    r0: int = div s x0;
    r1: int = add x0 r0;
    x1: int = div r1 two;
.L3:
    cond: bool = lt x1 x0;
    br cond .L4 .L5;
.L4:
    x0: int = id x1;
    r2: int = div s x0;
    r3: int = add x0 r2;
    x1: int = div r3 two;
    jmp .L3;
.L5:
    ret x0;
}

@quadratic(a: int, b: int, c: int) {
    neg_one: int = const -1;
    two: int = const 2;
    four: int = const 4;
    r0: int = mul b b;
    r1: int = mul a c;
    r2: int = mul four r1;
    r3: int = sub r0 r2;
    Y: int = call @sqrt r3;
    r4: int = sub Y b;
    r5: int = add Y b;
    r6: int = mul neg_one r5;
    r7: int = mul two a;
    r8: int = div r4 r7;
    r9: int = div r6 r7;
    print r8;
    print r9;
}

@main(a: int, b: int, c: int) {
    call @quadratic a b c;
}
