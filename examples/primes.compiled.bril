@get_prime(n: int): int {
  candidate: int = const 2;
  found: int = const 0;
.entry.1:
  v1: bool = const true;
  br v1 .body.1 .exit.1;
.body.1:
  v2: int = id candidate;
  v3: bool = call @is_prime v2;
  br v3 .then.2 .else.2;
.then.2:
  v4: int = id found;
  v5: int = const 1;
  v6: int = add v4 v5;
  found: int = id v6;
  v7: int = id found;
  v8: int = id n;
  v9: bool = eq v7 v8;
  br v9 .then.3 .else.3;
.then.3:
  v10: int = id candidate;
  ret v10;
  jmp .endif.3;
.else.3:
.endif.3:
  jmp .endif.2;
.else.2:
.endif.2:
  v11: int = id candidate;
  v12: int = const 1;
  v13: int = add v11 v12;
  candidate: int = id v13;
  jmp .entry.1;
.exit.1:
  v14: int = const 0;
  ret v14;
}
@is_prime(x: int): bool {
  div: int = const 2;
.entry.1:
  v1: int = id div;
  v2: int = id x;
  v3: bool = lt v1 v2;
  br v3 .body.1 .exit.1;
.body.1:
  v4: int = id x;
  v5: int = id div;
  v6: int = div v4 v5;
  v6: int = mul v6 v5;
  v6: int = sub v4 v6;
  v7: int = const 0;
  v8: bool = eq v6 v7;
  br v8 .then.2 .else.2;
.then.2:
  v9: bool = const false;
  ret v9;
  jmp .endif.2;
.else.2:
.endif.2:
  v10: int = id div;
  v11: int = const 1;
  v12: int = add v10 v11;
  div: int = id v12;
  jmp .entry.1;
.exit.1:
  v13: bool = const true;
  ret v13;
}
@main(n: int) {
  i: int = const 1;
.entry.1:
  v1: int = id i;
  v2: int = id n;
  v3: bool = le v1 v2;
  br v3 .body.1 .exit.1;
.body.1:
  v4: int = id i;
  v5: int = call @get_prime v4;
  print v5;
  v6: int = id i;
  v7: int = const 1;
  v8: int = add v6 v7;
  i: int = id v8;
  jmp .entry.1;
.exit.1:
}
