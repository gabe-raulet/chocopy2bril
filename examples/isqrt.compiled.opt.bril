@isqrt1(y: int): int {
  L: int = const 0;
.entry.1:
  v2: int = const 1;
  v3: int = add L v2;
  v5: int = const 1;
  v6: int = add L v5;
  v7: int = mul v3 v6;
  v9: bool = le v7 y;
  br v9 .body.1 .exit.1;
.body.1:
  v11: int = const 1;
  v12: int = add L v11;
  L: int = id v12;
  jmp .entry.1;
.exit.1:
  ret L;
}
@isqrt2(y: int): int {
  R: int = id y;
.entry.1:
  v4: int = mul R R;
  v6: bool = gt v4 y;
  br v6 .body.1 .exit.1;
.body.1:
  v8: int = const 1;
  v9: int = sub R v8;
  R: int = id v9;
  jmp .entry.1;
.exit.1:
  ret R;
}
@isqrt3(y: int): int {
  L: int = const 0;
  a: int = const 1;
  d: int = const 3;
.entry.1:
  v3: bool = le a y;
  br v3 .body.1 .exit.1;
.body.1:
  v6: int = add a d;
  a: int = id v6;
  v8: int = const 2;
  v9: int = add d v8;
  d: int = id v9;
  v11: int = const 1;
  v12: int = add L v11;
  L: int = id v12;
  jmp .entry.1;
.exit.1:
  ret L;
}
@isqrt4(y: int): int {
  L: int = const 0;
  M: int = const 0;
  v2: int = const 1;
  v3: int = add y v2;
  R: int = id v3;
.entry.1:
  v6: int = const 1;
  v7: int = sub R v6;
  lvn.4: bool = eq L v7;
  v8: bool = not lvn.4;
  br v8 .body.1 .exit.1;
.body.1:
  v11: int = add L R;
  v12: int = const 2;
  v13: int = div v11 v12;
  M: int = id v13;
  v16: int = mul v13 v13;
  v18: bool = le v16 y;
  br v18 .then.2 .else.2;
.then.2:
  L: int = id M;
  jmp .endif.2;
.else.2:
  R: int = id M;
.endif.2:
  jmp .entry.1;
.exit.1:
  ret L;
}
@isqrt5(s: int): int {
  x0: int = const 0;
  x1: int = const 0;
  v2: int = const 1;
  v3: bool = le s v2;
  br v3 .then.1 .else.1;
.then.1:
  ret s;
  jmp .endif.1;
.else.1:
.endif.1:
  v6: int = const 2;
  v7: int = div s v6;
  x0: int = id v7;
  v11: int = div s v7;
  v12: int = add v7 v11;
  v13: int = const 2;
  v14: int = div v12 v13;
  x1: int = id v14;
.entry.2:
  v17: bool = lt x1 x0;
  br v17 .body.2 .exit.2;
.body.2:
  x0: int = id x1;
  v22: int = div s x1;
  v23: int = add x1 v22;
  v24: int = const 2;
  v25: int = div v23 v24;
  x1: int = id v25;
  jmp .entry.2;
.exit.2:
  ret x0;
}
@isqrt6(n: int): int {
  small_cand: int = const 0;
  large_cand: int = const 0;
  v2: int = const 2;
  v3: bool = lt n v2;
  br v3 .then.1 .else.1;
.then.1:
  ret n;
  jmp .endif.1;
.else.1:
.endif.1:
  v6: int = const 4;
  v7: int = div n v6;
  v8: int = call @isqrt6 v7;
  v9: int = const 2;
  v10: int = mul v8 v9;
  small_cand: int = id v10;
  v12: int = const 1;
  v13: int = add v10 v12;
  large_cand: int = id v13;
  v16: int = mul v13 v13;
  v18: bool = gt v16 n;
  br v18 .then.2 .else.2;
.then.2:
  ret small_cand;
  jmp .endif.2;
.else.2:
  ret large_cand;
.endif.2:
}
@main(y: int, v: int) {
  v2: int = const 1;
  v3: bool = eq v v2;
  br v3 .then.1 .else.1;
.then.1:
  v5: int = call @isqrt1 y;
  print v5;
  jmp .endif.1;
.else.1:
  v7: int = const 2;
  v8: bool = eq v v7;
  br v8 .then.1.1 .else.1.1;
.then.1.1:
  v10: int = call @isqrt2 y;
  print v10;
  jmp .endif.1;
.else.1.1:
  v12: int = const 3;
  v13: bool = eq v v12;
  br v13 .then.1.2 .else.1.2;
.then.1.2:
  v15: int = call @isqrt3 y;
  print v15;
  jmp .endif.1;
.else.1.2:
  v17: int = const 4;
  v18: bool = eq v v17;
  br v18 .then.1.3 .else.1.3;
.then.1.3:
  v20: int = call @isqrt4 y;
  print v20;
  jmp .endif.1;
.else.1.3:
  v22: int = const 5;
  v23: bool = eq v v22;
  br v23 .then.1.4 .else.1.4;
.then.1.4:
  v25: int = call @isqrt5 y;
  print v25;
  jmp .endif.1;
.else.1.4:
  v27: int = const 6;
  v28: bool = eq v v27;
  br v28 .then.1.5 .else.1.5;
.then.1.5:
  v30: int = call @isqrt6 y;
  print v30;
  jmp .endif.1;
.else.1.5:
.endif.1:
}
